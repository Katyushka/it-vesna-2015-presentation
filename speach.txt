Слайд 1:
    Здравствуйте блаблабла.....

Слайд 2:
    Целью данной работы является блаблабла....

Слайд 3:
    Перед выполнением данной работы были поставлены следующие задачи блаблабла...

Слайд 4:
    В современном мире технологии программирования быстро приходят и уходят. Реальность такова, что начав изучать одну технологию по толстой книге с полным руководством, к тому моменту, когда вы дочитаете её до середины, эта технология может уже устареть :) Вот пример пары книжек по технологии java и ей сопутствующим, которые желательно знать начинающему разработчику [фотка на слайде]. По этому если вы, например, новичек, или разработчик, которому нужно выбрать одну из технологий, вам очень важно получить краткий, но содержательный обзор данной технологии, не вдаваясь в технические детали. В англоязычном IT сегменте очень популярны сайты с IT tutorial-ами, чего нельзя сказать о русскоязычном сегмете сети. По этому было решено заполнить эту нишу и разработать подобного рода сайт.

Слайд 5:
    Туториалы работают как принцип Парето, когда мы получаем 80% результата затрачивая 20% усилий.

Слайд 6:
    Теперь закончим скучное описание и перейдем к интересному...

Слайд [7-10]:
    Основными сущностями данного приложения являются сложные иерархии категорий и статьи в этих категориях. Так же имеется административная часть, которая позволяет управлять всем контентом сайта.

Слайд 11:
    О использованных технологиях на проекте в 1 слайде

Слайд 12-13:
    Начнем с того, что наше приложение размещено на облачной платформы - OpenShift. OpenShift это PaaS продукт от фирмы Red Hat, который так же является IaaS, сравним с такими облачными решениями, как Google Storage и Amazon S3. Следует отметить что Openshift предоставляет на бесплатном плане до 3х картреджей с базовым набором ресурсов. Опеншифт предоставляет готовые сконфигурированные решения на многих языках и под многие технологии и фреймворки. Для нашей технологии готового решения не было, и мы решили собрать свой DIY картридж, на котором с помощью bash скриптов развернули всю необходимую нам инфраструктуру приложения.

Слайд 14:
    Сборкой приложения занимается apache Maven. Он делает resolving dependency. Наше приложение имеет 2 профиля. Профиль разработчика поднимается с inmemorydb hsqldb и сконфигурирован на разработку и отладку приложения, и openshift профиль, который по суте является prodaction-ом. На продакшене приложение конфигурируется с mysql базой данных. Автоконфигурацией занимается Spring boot а единый интерфейс для работы с разными базами данных предоставляет имплементация JPA2 - spring data jpa, но об этом позже

Слайд 15:
    В качестве основного java фреймворка для реализации нашего проекта мы использовали Spring Framework. Он предоставляет большое кол-во возможностей для реализации JavaEE приложения.

Слайд 16:
    В нашем приложении ядро Spring выступает, как DI и IoC контейнер, предоствляет доступ к бинам через Application Context(который имплементирует в себе Been Factory).
    Классический спринг иногда критикуют за большой объём и сложность всевозможных конфигураций. Данную проблему решает один из свежих проектов Spring Boot - он предоставляет нам дефолтную конфигурацию основных модулей, а так-же пакует наше приложение с контейнером сервлетов в executable jar файл.
    Реализацией Java Persistance API занимается Spring data jpa, это дает нам унифицированный интерфейс доступа и хранения данных, имплементирует за нас Data access Layer и предоставляет удобный механизм доступа к Entities через Репозитории.
    Спринг секьюрити занимается аутентификацией и авторизацией в нашем приложении. Проверяет возможности пользователя, имплементирует CSRF защиту Rest запросов.
    Спринг буут тестинг предоставляет нам необходимые интерфейсы для написания и выполнения функциональным и модульных тестов.

Слайд 17:
    Реалии современного веба таковы, что классические подходы к постраению фронтенда остались в прошлом. Сейчас популярно использовать JS MVC фреймворк на фронтенде обращающийся с restFull backend-ом.

Слайд 18:
    Разрешением зависимостей на фронтенде занимается Bower - стандартный менеджен пакетов для JS, самый популярный содержит более 11 тысяч пакетов.

Слайд 19:
    В качестве фронтенд фреймворка мы использовали AngularJs от компании google.

Слайд 20:
    AngularJS позволяет создать нам Single Page application с поддержкой MVC, DI и предоставляет двустононний дата биндинг.

Слайд 21:
    Одна из лучших возможностей AngularJS, это создание директив, которые являются повторно используемыми web компонентами. Это дает возможность создавать новые HTML теги и атрибуты, которые могут динамично отображать контент в ответ на изменение данных, и обновлять сами данные, в случае необходимости.

Слайд 22:
    При разработке нашего приложения мы использовали ряд директив, для обеспечения нашего фронтенда всеми необходимыми функциями (Удобный CRUD для рест API, http маршрутизация, подсветка исходного кода в статьях, визивиг в админской части приложения) Так же мы написали свою директиву для подсветки синтаксиса внутри визивиг редактора.

Слайд 23:
    На фронтенде мы так же использовали html5 и twitter bootstrap 3 для построения красивых и отзывчивых интерфейсов.

Слайд 24:
    В итоге у нас получили простое приложение но с очень интересной архитектурой, которая может быть использована для построения веб приложений любой сложности. Мы решили все поставленные задачи и получили массу положительных эмоций от работы с современными технологиями!

Слайд 25:
    Спасибо, вопросы?



